name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_release: ${{ steps.check_tag.outputs.should_release }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags
    
    - name: Get version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version found: v$VERSION"
    
    - name: Check if tag exists
      id: check_tag
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "Tag $VERSION already exists"
          echo "should_release=false" >> $GITHUB_OUTPUT
        else
          echo "Tag $VERSION does not exist, will create release"
          echo "should_release=true" >> $GITHUB_OUTPUT
        fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract changelog section
      id: changelog
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        VERSION_NUM=${VERSION#v}  # Remove 'v' prefix
        
        # Extract the changelog section for this version
        CHANGELOG=$(awk "/^## \[$VERSION_NUM\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)
        
        # Write to file for multi-line support
        echo "$CHANGELOG" > release_notes.md
        echo "Release notes extracted for version $VERSION"
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.check-version.outputs.version }}
        name: Release ${{ needs.check-version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: false
        token: ${{ secrets.GITHUB_TOKEN }}
